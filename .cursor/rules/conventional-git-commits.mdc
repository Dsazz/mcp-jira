---
description: ENFORCE conventional git commit standards
globs: 
alwaysApply: false
---

# Conventional Git Commits

## Context
- Applied when making git commits through Cursor AI
- Ensures consistent and meaningful commit messages
- Facilitates automated changelog generation
- Improves git history readability and maintainability

## Requirements

### 1. Commit Message Format (Required)
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### 2. Commit Types (Required)
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect code meaning
- `refactor`: Code change (no features/fixes)
- `perf`: Performance improvements
- `test`: Adding or fixing tests
- `chore`: Build process or auxiliary tool changes
- `ci`: CI configuration changes
- `build`: Build system changes

### 3. Scope Guidelines (Required)
- Derive from file path or component name
- Use kebab-case format
- Keep concise but meaningful
- Optional for general changes

### 4. Description Standards (Required)
- Use imperative mood ("add" not "added")
- First letter not capitalized
- No period at the end
- Clear and concise (max 72 chars)
- Describe "what" and "why" vs "how"

## Examples

<example>
# Good: Feature commit
feat(auth-service): add OAuth2 authentication support

# Good: Bug fix with scope
fix(data-parser): resolve date parsing timezone issues

# Good: Multiple scope changes
refactor(core,api): restructure request handling logic
</example>

<example type="invalid">
# Bad: Missing type
(auth): added new login page

# Bad: Incorrect format
feature: Added authentication

# Bad: Vague description
fix(api): fixed bug
</example>

## Critical
- NEVER skip the commit type
- ALWAYS use lowercase for type and scope
- NEVER use past tense in description
- ALWAYS separate type/scope/description with correct punctuation
- NEVER exceed 72 characters in first line